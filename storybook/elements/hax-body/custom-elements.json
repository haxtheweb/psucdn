{
  "version": 1,
  "tags": [
    {
      "name": "hax-body",
      "description": "`hax-body`\nManager of the body area that can be modified\n\n### Styling\n`<hax-bodys>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-ui-headings |   | #d4ff77;\n--hax-color-text | default text color | #000\n--hax-contextual-action-text-color |  | --simple-colors-default-theme-grey-1\n--hax-contextual-action-color |  | --simple-colors-default-theme-cyan-7\n--hax-contextual-action-hover-color |  | \n--hax-body-target-background-color: --simple-colors-default-theme-cyan-2\n--hax-body-possible-target-background-color: --simple-colors-default-theme-grey-2\n\n####Outlines\nCustom property | Description | Default\n----------------|-------------|--------\n--hax-body-editable-outline |   | 1px solid --simple-colors-default-theme-deep-orange\n--hax-body-active-outline-hover: 1px solid --hax-contextual-action-color\n--hax-body-active-outline: 3px solid  --hax-contextual-action-color\n\nEvents:\n\n  * `hax-register-body` {`CustomEvent<this>`} - \n\n  * `place-holder-file-drop` {`CustomEvent<any>`} - \n\n  * `hax-drop-focus-event` {`CustomEvent<any>`} - \n\n  * `stack-changed` {`CustomEvent<{ value: Undo; }>`} - \n\n  * `can-undo-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `can-redo-changed` {`CustomEvent<{ value: any; }>`} - \n\nAttributes:\n\n  * `element-align` {`string`} - element align\n\n  * `tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `canMoveElement` {`boolean`} - activeNode can be moved\n\n  * `_useristyping` {`boolean`} - \n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `edit-mode` {`boolean`} - State of if we are editing or not.\n\n  * `hax-mover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `t` - \n\n  * `can-undo` {`boolean`} - If we can currently undo based on stack position\n\n  * `can-redo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `isGridActive` - \n\n  * `elementAlign` {`string`} - element align\n\n  * `trayDetail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `trayStatus` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\n  * `canMoveElement` {`boolean`} - activeNode can be moved\n\n  * `primitiveTextBlocks` {`string[]`} - Whole workflow of replacing something in place contextually.\nThis can fire for things like events needing this workflow to\ninvoke whether it's a \"convert\" event or a \"replace placeholder\" event\n\n  * `_useristyping` {`boolean`} - \n\n  * `__ignoreActive` {`boolean`} - \n\n  * `__dragMoving` {`boolean`} - \n\n  * `___moveLock` {`boolean`} - \n\n  * `viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\n  * `editMode` {`boolean`} - State of if we are editing or not.\n\n  * `haxMover` {`boolean`} - \n\n  * `activeNode` - A reference to the active node in the slot.\n\n  * `__lockIconPath` - \n\n  * `part` {`string`} - \n\n  * `timesClickedArrowDown` {`number`} - \n\n  * `timesClickedArrowUp` {`number`} - \n\n  * `polyfillSafe` - \n\n  * `t` - \n\n  * `canUndo` {`boolean`} - If we can currently undo based on stack position\n\n  * `canRedo` {`boolean`} - If we can currently redo based on stack position\n\n  * `target` - Allow for targetting OTHER elements w/ this behavior\n\n  * `stack` - The undo stack order\n\n  * `undoStackLimit` {`number`} - \n\n  * `undoStackTimer` {`number`} - \n\n  * `undoStackIgnore` {`boolean`} - \n\n  * `undoStackObserver` - \n\n  * `undoStackObserverProps` - Properties for the mutation observer\n\n  * `undoStackInitialValue` - \n\n  * `undoStackPrevValue` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - element align\n\nProperty: elementAlign"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayDetail"
        },
        {
          "name": "tray-status",
          "description": "`tray-status` {`string`} - is hax tray collapsed, side-panel, or full-panel\n\nProperty: trayStatus"
        },
        {
          "name": "canMoveElement",
          "description": "`canMoveElement` {`boolean`} - activeNode can be moved\n\nProperty: canMoveElement",
          "valueSet": "v"
        },
        {
          "name": "_useristyping",
          "description": "`_useristyping` {`boolean`} - \n\nProperty: _useristyping\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "viewSourceToggle",
          "description": "`viewSourceToggle` {`boolean`} - Is active node in view source mode?\n\nProperty: viewSourceToggle\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "edit-mode",
          "description": "`edit-mode` {`boolean`} - State of if we are editing or not.\n\nProperty: editMode\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hax-mover",
          "description": "`hax-mover` {`boolean`} - \n\nProperty: haxMover\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - A reference to the active node in the slot.\n\nProperty: activeNode\n\nDefault: null"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "can-undo",
          "description": "`can-undo` {`boolean`} - If we can currently undo based on stack position\n\nProperty: canUndo",
          "valueSet": "v"
        },
        {
          "name": "can-redo",
          "description": "`can-redo` {`boolean`} - If we can currently redo based on stack position\n\nProperty: canRedo",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - Allow for targetting OTHER elements w/ this behavior\n\nProperty: target"
        },
        {
          "name": "stack",
          "description": "`stack` - The undo stack order\n\nProperty: stack"
        },
        {
          "name": "undoStackObserverProps",
          "description": "`undoStackObserverProps` - Properties for the mutation observer\n\nProperty: undoStackObserverProps\n\nDefault: [object Object]"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-register-body",
          "description": "`hax-register-body` {`CustomEvent<this>`} - "
        },
        {
          "name": "onplace-holder-file-drop",
          "description": "`place-holder-file-drop` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-drop-focus-event",
          "description": "`hax-drop-focus-event` {`CustomEvent<any>`} - "
        },
        {
          "name": "onstack-changed",
          "description": "`stack-changed` {`CustomEvent<{ value: Undo; }>`} - "
        },
        {
          "name": "oncan-undo-changed",
          "description": "`can-undo-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "oncan-redo-changed",
          "description": "`can-redo-changed` {`CustomEvent<{ value: any; }>`} - "
        }
      ]
    },
    {
      "name": "hax-app-picker",
      "description": "`hax-app-picker`\n`app pop over + picker with options`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `title` {`string`} - Title for the dialog\n\nProperties:\n\n  * `windowControllers` - \n\n  * `title` {`string`} - Title for the dialog",
      "attributes": [
        {
          "name": "title",
          "description": "`title` {`string`} - Title for the dialog\n\nProperty: title\n\nDefault: Select an option"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-app-search",
      "description": "`hax-app-search`\n`An element that brokers the visual display of a listing of material from an end point. The goal is to normalize data from some location which is media centric. This expects to get at least enough data in order to form a grid of items which are selectable. It's also generically implemented so that anything can be hooked up as a potential source for input (example: youtube API or custom in-house solution). The goal is to return enough info via fired event so that we can tell hax-body that the user selected a tag, properties, slot combination so that hax-body can turn the selection into a custom element / element injected into the hax-body slot.`\n\nAttributes:\n\n  * `activeApp` - Active app globally bound based on previous selection.\n\n  * `tos` {`any[]`} - Terms of service object\n\n  * `searchSchema` - Search schema for presenting a form of input.\n\n  * `requestEndPoint` {`string`} - \n\n  * `requestParams` - \n\n  * `auto` {`boolean`} - Immediatley perform a request.\n\n  * `headers` - Custom headers for data binding from the App feed.\n\n  * `method` {`string`} - Custom method for requesting data (almost always will be GET)\n\n  * `loading` {`boolean`} - loading\n\n  * `requestData` - Media request data updated\n\n  * `media` {`any[]`} - Media object, normalized.\n\n  * `resultMap` - \n\nProperties:\n\n  * `activeApp` - Active app globally bound based on previous selection.\n\n  * `tos` {`any[]`} - Terms of service object\n\n  * `searchSchema` - Search schema for presenting a form of input.\n\n  * `requestEndPoint` {`string`} - \n\n  * `requestParams` - \n\n  * `auto` {`boolean`} - Immediatley perform a request.\n\n  * `headers` - Custom headers for data binding from the App feed.\n\n  * `method` {`string`} - Custom method for requesting data (almost always will be GET)\n\n  * `loading` {`boolean`} - loading\n\n  * `requestData` - Media request data updated\n\n  * `media` {`any[]`} - Media object, normalized.\n\n  * `resultMap` - ",
      "attributes": [
        {
          "name": "activeApp",
          "description": "`activeApp` - Active app globally bound based on previous selection.\n\nProperty: activeApp"
        },
        {
          "name": "tos",
          "description": "`tos` {`any[]`} - Terms of service object\n\nProperty: tos"
        },
        {
          "name": "searchSchema",
          "description": "`searchSchema` - Search schema for presenting a form of input.\n\nProperty: searchSchema"
        },
        {
          "name": "requestEndPoint",
          "description": "`requestEndPoint` {`string`} - \n\nProperty: requestEndPoint"
        },
        {
          "name": "requestParams",
          "description": "`requestParams` - \n\nProperty: requestParams"
        },
        {
          "name": "auto",
          "description": "`auto` {`boolean`} - Immediatley perform a request.\n\nProperty: auto\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "headers",
          "description": "`headers` - Custom headers for data binding from the App feed.\n\nProperty: headers\n\nDefault: [object Object]"
        },
        {
          "name": "method",
          "description": "`method` {`string`} - Custom method for requesting data (almost always will be GET)\n\nProperty: method\n\nDefault: GET"
        },
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - loading\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "requestData",
          "description": "`requestData` - Media request data updated\n\nProperty: requestData\n\nDefault: [object Object]"
        },
        {
          "name": "media",
          "description": "`media` {`any[]`} - Media object, normalized.\n\nProperty: media\n\nDefault: "
        },
        {
          "name": "resultMap",
          "description": "`resultMap` - \n\nProperty: resultMap\n\nDefault: [object Object]"
        }
      ]
    },
    {
      "name": "hax-app",
      "description": "`hax-app`\nAn app registered with HAX. This provides all the information needed for HAX\nto understand how to talk to this backend as well as represent it in listings.\nIt also expresses how to take that data and wire it up to gizmos making it able to\nutilize multiple display methods.\n\nProperties:\n\n  * `eventName` {`string`} - ",
      "attributes": []
    },
    {
      "name": "hax-stax",
      "description": "`hax-stax`\nRegister a stax with HAX store.\n\nProperties:\n\n  * `eventName` {`string`} - ",
      "attributes": []
    },
    {
      "name": "hax-autoloader",
      "description": "`hax-autoloader`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\n  * `hax-register-properties` {`CustomEvent<{ tag: any; properties: any; polymer: boolean; }>`} - \n\nAttributes:\n\n  * `processedList` - List of elements processed so we don't double process\n\n  * `haxProperties` - haxProperties\n\nProperties:\n\n  * `processedList` - List of elements processed so we don't double process\n\n  * `haxProperties` - haxProperties\n\n  * `windowControllers` - \n\n  * `HAXWiring` - ",
      "attributes": [
        {
          "name": "processedList",
          "description": "`processedList` - List of elements processed so we don't double process\n\nProperty: processedList\n\nDefault: [object Object]"
        },
        {
          "name": "haxProperties",
          "description": "`haxProperties` - haxProperties\n\nProperty: haxProperties"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        },
        {
          "name": "onhax-register-properties",
          "description": "`hax-register-properties` {`CustomEvent<{ tag: any; properties: any; polymer: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "hax-cancel-dialog",
      "description": "`hax-cancel-dialog`\n\nEvents:\n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\nAttributes:\n\n  * `t` - \n\nProperties:\n\n  * `t` - ",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        }
      ]
    },
    {
      "name": "hax-context-item-textop",
      "description": "`hax-context-item-textop`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `action` {`boolean`} - \n\n  * `input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `property-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `slot-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `action` {`boolean`} - \n\n  * `inputMethod` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `propertyToBind` {`string`} - Optional slot to bind this value to.\n\n  * `slotToBind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description for this item.\n\nProperty: description"
        },
        {
          "name": "action",
          "description": "`action` {`boolean`} - \n\nProperty: action\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "input-method",
          "description": "`input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\nProperty: inputMethod\n\nDefault: null"
        },
        {
          "name": "property-to-bind",
          "description": "`property-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: propertyToBind\n\nDefault: null"
        },
        {
          "name": "slot-to-bind",
          "description": "`slot-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: slotToBind\n\nDefault: null"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\nProperty: value\n\nDefault: "
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName\n\nDefault: button"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-context-item",
      "description": "`hax-context-item`\nA single button in the hax context menu for consistency.\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `label` {`string`} - Label for the button.\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `default` {`boolean`} - Is this button concidered a primary interaction\n\n  * `action` {`boolean`} - \n\n  * `more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\n  * `input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `property-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `slot-to-bind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `label` {`string`} - Label for the button.\n\n  * `description` {`string`} - Optional description for this item.\n\n  * `default` {`boolean`} - Is this button concidered a primary interaction\n\n  * `haxUIElement` {`boolean`} - \n\n  * `action` {`boolean`} - \n\n  * `more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\n  * `inputMethod` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\n  * `propertyToBind` {`string`} - Optional slot to bind this value to.\n\n  * `slotToBind` {`string`} - Optional slot to bind this value to.\n\n  * `value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the button.\n\nProperty: label"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description for this item.\n\nProperty: description"
        },
        {
          "name": "default",
          "description": "`default` {`boolean`} - Is this button concidered a primary interaction\n\nProperty: default",
          "valueSet": "v"
        },
        {
          "name": "action",
          "description": "`action` {`boolean`} - \n\nProperty: action\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "more",
          "description": "`more` {`boolean`} - more implies there's an action after pressing the button\nso it'll put a visual indicator as such\n\nProperty: more\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "input-method",
          "description": "`input-method` {`string`} - Method of input to display when activated. This is\nonly used when triggered as part of haxProperties\n\nProperty: inputMethod\n\nDefault: null"
        },
        {
          "name": "property-to-bind",
          "description": "`property-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: propertyToBind\n\nDefault: null"
        },
        {
          "name": "slot-to-bind",
          "description": "`slot-to-bind` {`string`} - Optional slot to bind this value to.\n\nProperty: slotToBind\n\nDefault: null"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - an optional value to send along in the press. Allows for\nreusing events more easily\n\nProperty: value\n\nDefault: "
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName\n\nDefault: button"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: this; eventName: string; value: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-element-demo",
      "description": "Attributes:\n\n  * `render-tag` {`string`} - \n\n  * `active-picker-schema` {`number`} - \n\n  * `element-visible` {`boolean`} - \n\nProperties:\n\n  * `renderTag` {`string`} - \n\n  * `activePickerSchema` {`number`} - \n\n  * `elementVisible` {`boolean`} - \n\n  * `IOThresholds` {`number[]`} - \n\n  * `IORootMargin` {`string`} - \n\n  * `IOVisibleLimit` {`number`} - \n\n  * `IORemoveOnVisible` {`boolean`} - \n\n  * `IODelay` {`number`} - \n\n  * `IORoot` - ",
      "attributes": [
        {
          "name": "render-tag",
          "description": "`render-tag` {`string`} - \n\nProperty: renderTag\n\nDefault: null"
        },
        {
          "name": "active-picker-schema",
          "description": "`active-picker-schema` {`number`} - \n\nProperty: activePickerSchema\n\nDefault: -1"
        },
        {
          "name": "element-visible",
          "description": "`element-visible` {`boolean`} - \n\nProperty: elementVisible\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "hax-export-dialog",
      "description": "`hax-export-dialog`\n\nAttributes:\n\n  * `t` - \n\nProperties:\n\n  * `windowControllers` - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        }
      ]
    },
    {
      "name": "hax-gizmo-browser",
      "description": "`Browse a list of gizmos. This provides a listing of custom elements for people to search and select based on what have been defined as gizmos for users to select.`\n\nEvents:\n\n  * `filter` {`CustomEvent<boolean>`} - \n\n  * `filtered-changed` {`CustomEvent<{ value: any[]; }>`} - \n\nAttributes:\n\n  * `hidden` {`boolean`} - \n\n  * `activePreview` {`number`} - \n\n  * `categories` {`any[]`} - \n\n  * `recentGizmoList` {`any[]`} - \n\n  * `t` - \n\n  * `items` {`never[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `multi-match` {`boolean`} - Enable multi match when filtering so that space separated words are matched\nas separate words as opposed to a single phrase\n\nProperties:\n\n  * `hidden` {`boolean`} - \n\n  * `activePreview` {`number`} - \n\n  * `daemonKeyCombo` - \n\n  * `categories` {`any[]`} - \n\n  * `value` {`string`} - \n\n  * `recentGizmoList` {`any[]`} - \n\n  * `t` - \n\n  * `items` {`never[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `caseSensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `multiMatch` {`boolean`} - Enable multi match when filtering so that space separated words are matched\nas separate words as opposed to a single phrase",
      "attributes": [
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "activePreview",
          "description": "`activePreview` {`number`} - \n\nProperty: activePreview\n\nDefault: null"
        },
        {
          "name": "categories",
          "description": "`categories` {`any[]`} - \n\nProperty: categories\n\nDefault: "
        },
        {
          "name": "recentGizmoList",
          "description": "`recentGizmoList` {`any[]`} - \n\nProperty: recentGizmoList\n\nDefault: "
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "items",
          "description": "`items` {`never[]`} - These are the items to be filtered\n\nProperty: items\n\nDefault: "
        },
        {
          "name": "like",
          "description": "`like` {`string`} - Filter regular expression string\n\nProperty: like\n\nDefault: "
        },
        {
          "name": "where",
          "description": "`where` {`string`} - The filter-by field of your items array of objects\n\nProperty: where\n\nDefault: index"
        },
        {
          "name": "case-sensitive",
          "description": "`case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\nProperty: caseSensitive\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "filtered",
          "description": "`filtered` {`any[]`} - Filtered items\n\nProperty: filtered\n\nDefault: "
        },
        {
          "name": "multi-match",
          "description": "`multi-match` {`boolean`} - Enable multi match when filtering so that space separated words are matched\nas separate words as opposed to a single phrase\n\nProperty: multiMatch\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onfilter",
          "description": "`filter` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onfiltered-changed",
          "description": "`filtered-changed` {`CustomEvent<{ value: any[]; }>`} - "
        }
      ]
    },
    {
      "name": "hax-map",
      "description": "`hax-map`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; value: boolean; }>`} - \n\nAttributes:\n\n  * `opened` {`boolean`} - Title when open.\n\n  * `hidden` {`boolean`} - \n\n  * `cCount` {`string`} - \n\n  * `wCount` {`string`} - \n\n  * `bCount` {`string`} - \n\n  * `hCount` {`string`} - \n\n  * `pCount` {`string`} - \n\n  * `eCount` {`string`} - \n\n  * `activeNode` - \n\n  * `elementList` {`any[]`} - \n\n  * `t` - \n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `opened` {`boolean`} - Title when open.\n\n  * `hidden` {`boolean`} - \n\n  * `cCount` {`string`} - \n\n  * `wCount` {`string`} - \n\n  * `bCount` {`string`} - \n\n  * `hCount` {`string`} - \n\n  * `pCount` {`string`} - \n\n  * `eCount` {`string`} - \n\n  * `activeNode` - \n\n  * `elementList` {`any[]`} - \n\n  * `t` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "opened",
          "description": "`opened` {`boolean`} - Title when open.\n\nProperty: opened",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "cCount",
          "description": "`cCount` {`string`} - \n\nProperty: cCount"
        },
        {
          "name": "wCount",
          "description": "`wCount` {`string`} - \n\nProperty: wCount"
        },
        {
          "name": "bCount",
          "description": "`bCount` {`string`} - \n\nProperty: bCount"
        },
        {
          "name": "hCount",
          "description": "`hCount` {`string`} - \n\nProperty: hCount"
        },
        {
          "name": "pCount",
          "description": "`pCount` {`string`} - \n\nProperty: pCount"
        },
        {
          "name": "eCount",
          "description": "`eCount` {`string`} - \n\nProperty: eCount"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - \n\nProperty: activeNode"
        },
        {
          "name": "elementList",
          "description": "`elementList` {`any[]`} - \n\nProperty: elementList\n\nDefault: "
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; value: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "hax-picker",
      "description": "`hax-picker`\nA picker for selecting an item from a list of apps / hax gizmos which require\na decision to be made. This is used when multiple things match either on upload\nin the add operation of the app or in the gizmo selection to render through,\nsuch as having multiple ways of presenting an image.\n\nEvents:\n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\n  * `hax-app-picker-selection` {`CustomEvent<any>`} - \n\n  * `simple-modal-hide` {`CustomEvent<{}>`} - \n\nAttributes:\n\n  * `keywords` - \n\n  * `filters` {`any[]`} - \n\n  * `filter-on` {`boolean`} - \n\n  * `_elements` {`any[]`} - raw element set\n\n  * `selectionList` {`any[]`} - Refactored list for selection purposes\n\n  * `activePreview` {`number`} - \n\n  * `picker-type` {`string`} - Allow multiple uses\n\nProperties:\n\n  * `keywords` - \n\n  * `filters` {`any[]`} - \n\n  * `filterOn` {`boolean`} - \n\n  * `_elements` {`any[]`} - raw element set\n\n  * `selectionList` {`any[]`} - Refactored list for selection purposes\n\n  * `activePreview` {`number`} - \n\n  * `pickerType` {`string`} - Allow multiple uses",
      "attributes": [
        {
          "name": "keywords",
          "description": "`keywords` - \n\nProperty: keywords"
        },
        {
          "name": "filters",
          "description": "`filters` {`any[]`} - \n\nProperty: filters"
        },
        {
          "name": "filter-on",
          "description": "`filter-on` {`boolean`} - \n\nProperty: filterOn",
          "valueSet": "v"
        },
        {
          "name": "_elements",
          "description": "`_elements` {`any[]`} - raw element set\n\nProperty: _elements\n\nDefault: "
        },
        {
          "name": "selectionList",
          "description": "`selectionList` {`any[]`} - Refactored list for selection purposes\n\nProperty: selectionList\n\nDefault: "
        },
        {
          "name": "activePreview",
          "description": "`activePreview` {`number`} - \n\nProperty: activePreview\n\nDefault: null"
        },
        {
          "name": "picker-type",
          "description": "`picker-type` {`string`} - Allow multiple uses\n\nProperty: pickerType\n\nDefault: gizmo"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-app-picker-selection",
          "description": "`hax-app-picker-selection` {`CustomEvent<any>`} - "
        },
        {
          "name": "onsimple-modal-hide",
          "description": "`simple-modal-hide` {`CustomEvent<{}>`} - "
        }
      ]
    },
    {
      "name": "hax-plate-context",
      "description": "`hax-plate-context`\n`A context menu that provides common grid plate based authoring options.`\n\nEvents:\n\n  * `hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; }>`} - \n\nAttributes:\n\n  * `activeSchema` - \n\n  * `editElementProperty` {`string`} - \n\n  * `editElementToggled` {`boolean`} - \n\n  * `canMoveElement` {`boolean`} - \n\n  * `on-screen` {`boolean`} - \n\n  * `disableOps` {`boolean`} - \n\n  * `disableItemOps` {`boolean`} - \n\n  * `insertAbove` {`boolean`} - \n\n  * `disableDuplicate` {`boolean`} - \n\n  * `hasActiveEditingElement` {`boolean`} - \n\n  * `ceButtons` {`any[]`} - \n\n  * `activeTagName` {`string`} - \n\n  * `activeTagIcon` {`string`} - \n\n  * `t` - \n\n  * `activeNode` - \n\n  * `parentSchema` - \n\n  * `realSelectedValue` {`string`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `viewSource` {`boolean`} - \n\nProperties:\n\n  * `filteredBlocks` {`any[]`} - get a list of valid blocks for active node\n(if active node is a slot, some blockes may not be permitted)\n\n  * `activeSchema` - \n\n  * `editElementProperty` {`string`} - \n\n  * `editElementToggled` {`boolean`} - \n\n  * `canMoveElement` {`boolean`} - \n\n  * `onScreen` {`boolean`} - \n\n  * `disableOps` {`boolean`} - \n\n  * `disableItemOps` {`boolean`} - \n\n  * `insertAbove` {`boolean`} - \n\n  * `disableDuplicate` {`boolean`} - \n\n  * `hasActiveEditingElement` {`boolean`} - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `ceButtons` {`any[]`} - \n\n  * `activeTagName` {`string`} - \n\n  * `activeTagIcon` {`string`} - \n\n  * `t` - \n\n  * `activeNode` - \n\n  * `parentSchema` - \n\n  * `realSelectedValue` {`string`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `slotSchema` - \n\n  * `layoutElement` - closest layout element, self or parent\n\n  * `layoutParent` - if layout element is itself a slot, get its layout element\n\n  * `slottedItems` {`any[]`} - gets slotted items of closest layout element\n\n  * `viewSource` {`boolean`} - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "activeSchema",
          "description": "`activeSchema` - \n\nProperty: activeSchema"
        },
        {
          "name": "editElementProperty",
          "description": "`editElementProperty` {`string`} - \n\nProperty: editElementProperty"
        },
        {
          "name": "editElementToggled",
          "description": "`editElementToggled` {`boolean`} - \n\nProperty: editElementToggled",
          "valueSet": "v"
        },
        {
          "name": "canMoveElement",
          "description": "`canMoveElement` {`boolean`} - \n\nProperty: canMoveElement",
          "valueSet": "v"
        },
        {
          "name": "on-screen",
          "description": "`on-screen` {`boolean`} - \n\nProperty: onScreen",
          "valueSet": "v"
        },
        {
          "name": "disableOps",
          "description": "`disableOps` {`boolean`} - \n\nProperty: disableOps\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disableItemOps",
          "description": "`disableItemOps` {`boolean`} - \n\nProperty: disableItemOps\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "insertAbove",
          "description": "`insertAbove` {`boolean`} - \n\nProperty: insertAbove\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "disableDuplicate",
          "description": "`disableDuplicate` {`boolean`} - \n\nProperty: disableDuplicate\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hasActiveEditingElement",
          "description": "`hasActiveEditingElement` {`boolean`} - \n\nProperty: hasActiveEditingElement\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "ceButtons",
          "description": "`ceButtons` {`any[]`} - \n\nProperty: ceButtons\n\nDefault: "
        },
        {
          "name": "activeTagName",
          "description": "`activeTagName` {`string`} - \n\nProperty: activeTagName\n\nDefault: "
        },
        {
          "name": "activeTagIcon",
          "description": "`activeTagIcon` {`string`} - \n\nProperty: activeTagIcon\n\nDefault: hax:paragraph"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - \n\nProperty: activeNode"
        },
        {
          "name": "parentSchema",
          "description": "`parentSchema` - \n\nProperty: parentSchema"
        },
        {
          "name": "realSelectedValue",
          "description": "`realSelectedValue` {`string`} - \n\nProperty: realSelectedValue"
        },
        {
          "name": "sourceView",
          "description": "`sourceView` {`boolean`} - \n\nProperty: sourceView",
          "valueSet": "v"
        },
        {
          "name": "viewSource",
          "description": "`viewSource` {`boolean`} - \n\nProperty: viewSource\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-context-item-selected",
          "description": "`hax-context-item-selected` {`CustomEvent<{ target: any; eventName: string; }>`} - "
        }
      ]
    },
    {
      "name": "hax-preferences-dialog",
      "description": "`hax-preferences-dialog`\n\nEvents:\n\n  * `hax-tray-button-click` {`CustomEvent<{ eventName: string; index: number; value: boolean; }>`} - \n\nAttributes:\n\n  * `schema` - Schema that has all of inputs / manages state\n\n  * `globalPreferences` - Preferences managed for everything global about HAX.\n\n  * `hideLink` {`boolean`} - Developer prop to hide the link\n\n  * `t` - \n\nProperties:\n\n  * `schema` - Schema that has all of inputs / manages state\n\n  * `globalPreferences` - Preferences managed for everything global about HAX.\n\n  * `hideLink` {`boolean`} - Developer prop to hide the link\n\n  * `t` - ",
      "attributes": [
        {
          "name": "schema",
          "description": "`schema` - Schema that has all of inputs / manages state\n\nProperty: schema"
        },
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Preferences managed for everything global about HAX.\n\nProperty: globalPreferences"
        },
        {
          "name": "hideLink",
          "description": "`hideLink` {`boolean`} - Developer prop to hide the link\n\nProperty: hideLink\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "onhax-tray-button-click",
          "description": "`hax-tray-button-click` {`CustomEvent<{ eventName: string; index: number; value: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "hax-stax-browser",
      "description": "`hax-stax-browser`\n\nAttributes:\n\n  * `staxList` {`any[]`} - The list of stax\n\n  * `label` {`string`} - \n\nProperties:\n\n  * `staxList` {`any[]`} - The list of stax\n\n  * `label` {`string`} - ",
      "attributes": [
        {
          "name": "staxList",
          "description": "`staxList` {`any[]`} - The list of stax\n\nProperty: staxList\n\nDefault: "
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label\n\nDefault: Templates"
        }
      ]
    },
    {
      "name": "hax-store",
      "description": "Events:\n\n  * `hax-insert-content` {`CustomEvent<{ tag: any; properties: any; content: string; gizmo: any; }>`} - \n\n  * `hax-store-write` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - \n\n  * `hax-store-app-store-loaded` {`CustomEvent<boolean>`} - \n\n  * `hax-store-ready` {`CustomEvent<boolean>`} - \n\n  * `hax-cancel` {`CustomEvent<any>`} - \n\n  * `place-holder-file-drop` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `__appStoreData` - Internal app store data property after request\n\n  * `ready` {`boolean`} - \n\n  * `skip-hax-confirmation` {`boolean`} - skipHAXConfirmation\n\n  * `storageData` - Local storage bridge\n\n  * `appStore` - Possible appStore endpoint for loading in things dynamically.\n\n  * `haxBodies` {`any[]`} - A list of all haxBodies that exist\n\n  * `activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\n  * `activePlaceHolderOperationType` {`string`} - \n\n  * `sessionObject` - Session object bridged in from a session method of some kind\n\n  * `skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\n  * `elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\n  * `haxAutoloader` - Hax autoloader element.\n\n  * `haxTray` - Hax tray\n\n  * `haxCancel` - Hax cancel dialog\n\n  * `staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\n  * `connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\n  * `validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\n  * `_isSandboxed` {`boolean`} - Sandboxed environment test\n\n  * `t` - \n\n  * `haxProperties` - haxProperties\n\nProperties:\n\n  * `__appStoreData` - Internal app store data property after request\n\n  * `ready` {`boolean`} - \n\n  * `activeGizmo` - \n\n  * `activeNodeIndex` {`null`} - \n\n  * `toastShowEventName` {`string | string`} - \n\n  * `primativeHooks` - \n\n  * `__dragTarget` - \n\n  * `appSearch` - \n\n  * `method` {`string`} - \n\n  * `haxSelectedText` {`string`} - \n\n  * `__winEvents` - \n\n  * `skipHAXConfirmation` {`boolean`} - skipHAXConfirmation\n\n  * `storageData` - Local storage bridge\n\n  * `appStore` - Possible appStore endpoint for loading in things dynamically.\n\n  * `daemonKeyCombo` {`string`} - \n\n  * `activeNode` - \n\n  * `activeEditingElement` - \n\n  * `haxBodies` {`any[]`} - A list of all haxBodies that exist\n\n  * `activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\n  * `activePlaceHolderOperationType` {`string`} - \n\n  * `sessionObject` - Session object bridged in from a session method of some kind\n\n  * `editMode` {`boolean`} - \n\n  * `skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\n  * `appStoreLoaded` {`boolean`} - \n\n  * `elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\n  * `elementAlign` - \n\n  * `trayStatus` {`string`} - \n\n  * `trayDetail` {`string`} - \n\n  * `appList` {`never[]`} - \n\n  * `gizmoList` {`never[]`} - \n\n  * `recentGizmoList` - \n\n  * `haxAutoloader` - Hax autoloader element.\n\n  * `activeHaxBody` - \n\n  * `haxTray` - Hax tray\n\n  * `haxCancel` - Hax cancel dialog\n\n  * `staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\n  * `globalPreferences` - \n\n  * `activeApp` - \n\n  * `connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\n  * `daemonCommands` - \n\n  * `keyboardShortcuts` - \n\n  * `__primsBuilder` - \n\n  * `validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\n  * `validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\n  * `_isSandboxed` {`boolean`} - Sandboxed environment test\n\n  * `revisionHistoryLink` - \n\n  * `t` - \n\n  * `haxProperties` - haxProperties\n\n  * `windowControllers` - \n\n  * `HAXWiring` - ",
      "attributes": [
        {
          "name": "__appStoreData",
          "description": "`__appStoreData` - Internal app store data property after request\n\nProperty: __appStoreData"
        },
        {
          "name": "ready",
          "description": "`ready` {`boolean`} - \n\nProperty: ready",
          "valueSet": "v"
        },
        {
          "name": "skip-hax-confirmation",
          "description": "`skip-hax-confirmation` {`boolean`} - skipHAXConfirmation\n\nProperty: skipHAXConfirmation\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "storageData",
          "description": "`storageData` - Local storage bridge\n\nProperty: storageData\n\nDefault: [object Object]"
        },
        {
          "name": "appStore",
          "description": "`appStore` - Possible appStore endpoint for loading in things dynamically.\n\nProperty: appStore\n\nDefault: [object Object]"
        },
        {
          "name": "haxBodies",
          "description": "`haxBodies` {`any[]`} - A list of all haxBodies that exist\n\nProperty: haxBodies\n\nDefault: "
        },
        {
          "name": "activePlaceHolder",
          "description": "`activePlaceHolder` - An active place holder item reference. This is used\nfor inline drag and drop event detection so that we\nknow what element replace in context.\n\nProperty: activePlaceHolder\n\nDefault: null"
        },
        {
          "name": "activePlaceHolderOperationType",
          "description": "`activePlaceHolderOperationType` {`string`} - \n\nProperty: activePlaceHolderOperationType\n\nDefault: null"
        },
        {
          "name": "sessionObject",
          "description": "`sessionObject` - Session object bridged in from a session method of some kind\n\nProperty: sessionObject\n\nDefault: [object Object]"
        },
        {
          "name": "skipExitTrap",
          "description": "`skipExitTrap` {`boolean`} - skip the exit trap to prevent losing data\n\nProperty: skipExitTrap\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "elementList",
          "description": "`elementList` - Available elements keyed by tagName and with\ntheir haxProperties centrally registered.\n\nProperty: elementList\n\nDefault: [object Object]"
        },
        {
          "name": "haxAutoloader",
          "description": "`haxAutoloader` - Hax autoloader element.\n\nProperty: haxAutoloader\n\nDefault: null"
        },
        {
          "name": "haxTray",
          "description": "`haxTray` - Hax tray\n\nProperty: haxTray\n\nDefault: null"
        },
        {
          "name": "haxCancel",
          "description": "`haxCancel` - Hax cancel dialog\n\nProperty: haxCancel\n\nDefault: null"
        },
        {
          "name": "staxList",
          "description": "`staxList` {`any[]`} - Available hax stax which are just re-usable templates\n\nProperty: staxList\n\nDefault: "
        },
        {
          "name": "connectionRewrites",
          "description": "`connectionRewrites` - Support for deploy specific rewriting for things like JWTs\n\nProperty: connectionRewrites\n\nDefault: [object Object]"
        },
        {
          "name": "validTagList",
          "description": "`validTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\nProperty: validTagList"
        },
        {
          "name": "validGridTagList",
          "description": "`validGridTagList` {`any[]`} - Valid tag list, tag only and including primatives for a baseline.\n\nProperty: validGridTagList"
        },
        {
          "name": "validGizmoTypes",
          "description": "`validGizmoTypes` {`any[]`} - Gizmo types which can be used to bridge apps to gizmos.\n\nProperty: validGizmoTypes"
        },
        {
          "name": "_isSandboxed",
          "description": "`_isSandboxed` {`boolean`} - Sandboxed environment test\n\nProperty: _isSandboxed",
          "valueSet": "v"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "haxProperties",
          "description": "`haxProperties` - haxProperties\n\nProperty: haxProperties"
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<{ tag: any; properties: any; content: string; gizmo: any; }>`} - "
        },
        {
          "name": "onhax-store-write",
          "description": "`hax-store-write` {`CustomEvent<{ property: any; value: any; owner: any; }>`} - "
        },
        {
          "name": "onhax-store-app-store-loaded",
          "description": "`hax-store-app-store-loaded` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhax-store-ready",
          "description": "`hax-store-ready` {`CustomEvent<boolean>`} - "
        },
        {
          "name": "onhax-cancel",
          "description": "`hax-cancel` {`CustomEvent<any>`} - "
        },
        {
          "name": "onplace-holder-file-drop",
          "description": "`place-holder-file-drop` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-button",
      "description": "`hax-text-editor-button`\na custom-element button for hax text editor (custom buttons can extend this)\n\nEvents:\n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-close` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-confirm` {`CustomEvent<this>`} - \n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `element` - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for globalThis.document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `element` - \n\n  * `tag` {`string`} - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - determines commandVal based on values passed from prompt\n(can be overriden for custom prompt command values)\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `targetedNode` - \n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for globalThis.document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for globalThis.document.execCommand\n\n  * `operationCommandVal` - gets value param for globalThis.document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "element",
          "description": "`element` - \n\nProperty: element"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for globalThis.document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-close",
          "description": "`rich-text-editor-prompt-close` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-confirm",
          "description": "`rich-text-editor-prompt-confirm` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-paste-button",
      "description": "`hax-text-editor-paste-button`\na link button for rich text editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `command` {`string`} - The command used for globalThis.document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `command` {`string`} - The command used for globalThis.document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for globalThis.document.execCommand\n\n  * `operationCommandVal` - gets value param for globalThis.document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for globalThis.document.execCommand.\n\nProperty: command\n\nDefault: paste"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for globalThis.document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor-toolbar",
      "description": "`hax-text-editor-toolbar`\na customized toolbar (with buttons) for HAX\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `close` {`CustomEvent<this>`} - \n\n  * `editor-change` {`CustomEvent<this>`} - \n\n  * `range-changed` {`CustomEvent<this>`} - \n\n  * `enabled` {`CustomEvent<any>`} - \n\n  * `disabled` {`CustomEvent<any>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `__updated` {`boolean`} - \n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `aria-controls` {`string`} - id of element controlled by toolbar\n\n  * `aria-label` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `more-shortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `t` - \n\n  * `activeNode` - \n\n  * `parentSchema` - \n\n  * `realSelectedValue` {`string`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `viewSource` {`boolean`} - \n\nProperties:\n\n  * `tourTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `formatBlocks` {`{ label: string; tag: string; }[]`} - \n\n  * `advancedInlineButtonGroup` {`{ type: string; subtype: string; buttons: any[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `haxSymbolInsertButtonGroup` {`{ type: string; subtype: string; buttons: any[]; }`} - \n\n  * `filteredBlocks` - \n\n  * `formatButtonElement` - \n\n  * `tag` {`string`} - \n\n  * `__updated` {`boolean`} - \n\n  * `undoButton` - default config for a format button\n\n  * `redoButton` - default config for a format button\n\n  * `historyButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a history button group: undo + redo\n\n  * `formatButton` - default config for a format button\n\n  * `boldButton` - default config for a bold button\n\n  * `italicButton` - default config for an italic button\n\n  * `underlineButton` - default config for an underline button\n\n  * `strikethroughButton` - default config for an underline button\n\n  * `removeFormatButton` - default config for a remove format button\n\n  * `codeButton` - default config for a <code></code> button\n\n  * `markButton` - default config for a <code></code> button\n\n  * `abbrButton` - default config for a <code></code> button\n\n  * `basicInlineButtonGroup` {`{ type: string; subtype: string; buttons: { label: string; type: string; }[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `linkButton` - default config for a link button\n\n  * `unlinkButton` - default config for a link button\n\n  * `linkButtonGroup` {`{ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; }`} - default config for a link button group: link\n\n  * `cutButton` - default config for a cut button\n\n  * `copyButton` - default config for a copy button\n\n  * `pasteButton` - default config for a paste button\n\n  * `clipboardButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a clipboard button group: cut, copy, and paste\n\n  * `subscriptButton` - default config for a subscript button\n\n  * `superscriptButton` - default config for a superscript button\n\n  * `scriptButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a script button group: subscript & superscript\n\n  * `symbolButton` - default config for a symbol button\n\n  * `iconButton` - default config for a symbol button\n\n  * `emojiButton` - default config for an emoji button\n\n  * `imageButton` - default config for an image button\n\n  * `insertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `advancedInsertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `justifyLeftButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyCenterButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyRightButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyFullButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; required: boolean; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for an insert button group: image\n\n  * `orderedListButton` - default config for an ordered list button\n\n  * `unorderedListButton` - default config for an unordered list button\n\n  * `blockquoteButton` - default config for a blockquote button\n\n  * `indentButton` - default config for an indent button\n\n  * `outdentButton` - default config for an outdent button\n\n  * `listButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `listIndentButtonGroup` {`{ type: string; subtype: string; buttons: ({ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for an save button\n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a close button\n\n  * `saveCloseButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - default config for a save and close button group: save and close\n\n  * `sourceButton` - default config for a view source button\n\n  * `sourceButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for a source button group: view source\n\n  * `defaultConfig` {`any[]`} - default config for toolbar with\ndefault history, style, link, clipboard, script, insert, and list button groups\n\n  * `miniConfig` {`({ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - default config for toolbar with\ndefault a custom group of style buttons,\ndefault link button group,\ndefault script button group,\nand a custom list button groups\n\n  * `miniTemplate` {`UncompiledTemplateResult<1>`} - a template that places toolbar in a container\nso that it can be positioned absolutely\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `controls` {`string`} - id of editor currently being controlled\n\n  * `disconnected` {`boolean`} - determines if the toolbar is hidden\n\n  * `noSelection` {`boolean`} - determines if the toolbar has an extive selection\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `isRangeInScope` - determines if current range is in scope of the target\noverrides default behavior so that the entire target can be selected\n\n  * `enabledTargetHandlers` {`{ keydown: any; keypress: any; mousedown: any; mouseup: any; }`} - \n\n  * `targetHTML` {`string`} - gets cleaned HTML from the target\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `ariaControls` {`string`} - id of element controlled by toolbar\n\n  * `ariaLabel` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `moreShortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`UncompiledTemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` - default toolbar template uses simple-toolbar\n\n  * `firstItem` - gets first main menu item\n\n  * `nextItem` - gets next main menu item\n\n  * `previousItem` - gets next main menu item\n\n  * `lastItem` - gets last main menu item\n\n  * `mainItems` {`any[]`} - gets main menu items\n\n  * `keyCode` {`{ TAB: number; ENTER: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key codes by key\n\n  * `windowControllers` - \n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `iconPosition` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `_handleResize` - \n\n  * `t` - \n\n  * `activeNode` - \n\n  * `parentSchema` - \n\n  * `realSelectedValue` {`string`} - \n\n  * `sourceView` {`boolean`} - \n\n  * `slotSchema` - \n\n  * `layoutElement` - closest layout element, self or parent\n\n  * `layoutParent` - if layout element is itself a slot, get its layout element\n\n  * `slottedItems` {`any[]`} - gets slotted items of closest layout element\n\n  * `viewSource` {`boolean`} - \n\n  * `tourName` {`string`} - ",
      "attributes": [
        {
          "name": "__updated",
          "description": "`__updated` {`boolean`} - \n\nProperty: __updated\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: target"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\nProperty: show"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__prompt",
          "description": "`__prompt` - \n\nProperty: __prompt"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "aria-controls",
          "description": "`aria-controls` {`string`} - id of element controlled by toolbar\n\nProperty: ariaControls"
        },
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - label for the toolbar\n\nProperty: ariaLabel"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: default"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - \n\nProperty: activeNode"
        },
        {
          "name": "parentSchema",
          "description": "`parentSchema` - \n\nProperty: parentSchema"
        },
        {
          "name": "realSelectedValue",
          "description": "`realSelectedValue` {`string`} - \n\nProperty: realSelectedValue"
        },
        {
          "name": "sourceView",
          "description": "`sourceView` {`boolean`} - \n\nProperty: sourceView\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "viewSource",
          "description": "`viewSource` {`boolean`} - \n\nProperty: viewSource\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<this>`} - "
        },
        {
          "name": "oneditor-change",
          "description": "`editor-change` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrange-changed",
          "description": "`range-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onenabled",
          "description": "`enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "ondisabled",
          "description": "`disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-text-editor",
      "description": "`hax-text-editor`\nHAX-specific implementation of rich-text-editor\n\nEvents:\n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `contenteditable-change` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar-id` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\nProperties:\n\n  * `haxUIElement` {`boolean`} - \n\n  * `tag` {`string`} - \n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `editable` {`boolean`} - \n\n  * `isEmpty` {`boolean`} - \n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbarId` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - ",
      "attributes": [
        {
          "name": "contenteditable",
          "description": "`contenteditable` {`string`} - Maps to editing attribute\n\nProperty: contenteditable"
        },
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "aria-placeholder",
          "description": "`aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar-id",
          "description": "`toolbar-id` {`string`} - id for toolbar\n\nProperty: toolbarId\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: hax-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncontenteditable-change",
          "description": "`contenteditable-change` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "",
      "description": "`hax-toolbar-item`\na button for hax toolbar\n\nEvents:\n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-toolbar-menu",
      "description": "`hax-toolbar-menu`\n`An icon / button that has support for multiple options via drop down.`\n\nEvents:\n\n  * `close` {`CustomEvent<this>`} - Fires when menu is closed\n\n  * `open` {`CustomEvent<this>`} - Fires when menu is opened\n\n  * `item-click` {`CustomEvent<Event>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\n  * `currentItem` - Whether toggle is disabled\n\n  * `focused` {`boolean`} - Whether button is toggled\n\n  * `hovered` {`boolean`} - Whether button is toggled\n\n  * `position` {`string`} - Positions list to top, right, bottom, left of its content.\n\n  * `position-align` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\n  * `offset` {`number`} - spacing between top of list and menu button\n\n  * `expanded` {`boolean`} - Whether toggle is disabled\n\n  * `menuItems` {`any[]`} - menu items in array form to move from prev to next\n\n  * `keep-open-on-click` {`boolean`} - overrides default behavior of closing\nmenu after an item is clicked\n\n  * `no-open-on-hover` {`boolean`} - disables menu i=opening on hover\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `disabled` {`boolean`} - Whether toggle is disabled\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\n  * `tooltipDirection` {`string`} - \n\n  * `currentItem` - Whether toggle is disabled\n\n  * `focused` {`boolean`} - Whether button is toggled\n\n  * `hovered` {`boolean`} - Whether button is toggled\n\n  * `menuTemplate` {`UncompiledTemplateResult<1>`} - template for dropdown menu\n\n  * `listItemTemplate` {`UncompiledTemplateResult<1>`} - template for slotted list items\n\n  * `keyCode` {`{ TAB: number; RETURN: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key code translations as object\n\n  * `firstItem` - gets first menu item\n\n  * `previousItem` - gets previous menu item\n\n  * `nextItem` - gets next menu item\n\n  * `lastItem` - gets last menu item\n\n  * `firstChars` {`any[]`} - gets list of menu item first characters\n\n  * `itemListeners` {`{ click: (event: Event | undefined) => void; focus: (event: Event | undefined) => void; blur: (event: Event | undefined) => void; mouseover: (event: Event | undefined) => void; mouseout: (event: Event | undefined) => void; keydown: (event: Event | undefined) => void; }`} - menuitem event listeners and their handlers\n\n  * `position` {`string`} - Positions list to top, right, bottom, left of its content.\n\n  * `positionAlign` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\n  * `offset` {`number`} - spacing between top of list and menu button\n\n  * `expanded` {`boolean`} - Whether toggle is disabled\n\n  * `menuItems` {`any[]`} - menu items in array form to move from prev to next\n\n  * `keepOpenOnClick` {`boolean`} - overrides default behavior of closing\nmenu after an item is clicked\n\n  * `noOpenOnHover` {`boolean`} - disables menu i=opening on hover\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `focusableElement` - gets focusable button element\n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template menu button\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Whether toggle is disabled\n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "_blockEvent",
          "description": "`_blockEvent` {`boolean`} - Internal flag to allow blocking the event firing if machine selects tag.\n\nProperty: _blockEvent\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "currentItem",
          "description": "`currentItem` - Whether toggle is disabled\n\nProperty: currentItem"
        },
        {
          "name": "focused",
          "description": "`focused` {`boolean`} - Whether button is toggled\n\nProperty: focused",
          "valueSet": "v"
        },
        {
          "name": "hovered",
          "description": "`hovered` {`boolean`} - Whether button is toggled\n\nProperty: hovered",
          "valueSet": "v"
        },
        {
          "name": "position",
          "description": "`position` {`string`} - Positions list to top, right, bottom, left of its content.\n\nProperty: position\n\nDefault: bottom"
        },
        {
          "name": "position-align",
          "description": "`position-align` {`string`} - Aligns list at start, or end fo target. Default is centered.\n\nProperty: positionAlign\n\nDefault: start"
        },
        {
          "name": "offset",
          "description": "`offset` {`number`} - spacing between top of list and menu button\n\nProperty: offset\n\nDefault: 0"
        },
        {
          "name": "expanded",
          "description": "`expanded` {`boolean`} - Whether toggle is disabled\n\nProperty: expanded\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "menuItems",
          "description": "`menuItems` {`any[]`} - menu items in array form to move from prev to next\n\nProperty: menuItems\n\nDefault: "
        },
        {
          "name": "keep-open-on-click",
          "description": "`keep-open-on-click` {`boolean`} - overrides default behavior of closing\nmenu after an item is clicked\n\nProperty: keepOpenOnClick\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "no-open-on-hover",
          "description": "`no-open-on-hover` {`boolean`} - disables menu i=opening on hover\n\nProperty: noOpenOnHover\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Whether toggle is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<this>`} - Fires when menu is closed"
        },
        {
          "name": "onopen",
          "description": "`open` {`CustomEvent<this>`} - Fires when menu is opened"
        },
        {
          "name": "onitem-click",
          "description": "`item-click` {`CustomEvent<Event>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "",
      "description": "Events:\n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `selected` {`boolean`} - See what's selected\n\n  * `inline` {`boolean`} - This is an inline context menu\n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `aria-controls` {`string`} - id of element controlled by toolbar\n\n  * `aria-label` {`string`} - label for the toolbar\n\n  * `id` {`string`} - unique id\n\n  * `more-shortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `selected` {`boolean`} - See what's selected\n\n  * `inline` {`boolean`} - This is an inline context menu\n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `ariaControls` {`string`} - id of element controlled by toolbar\n\n  * `ariaLabel` {`string`} - label for the toolbar\n\n  * `id` {`string`} - unique id\n\n  * `moreShortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`UncompiledTemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` {`UncompiledTemplateResult<1>`} - toolbar element's template\n\n  * `firstItem` - gets first main menu item\n\n  * `nextItem` - gets next main menu item\n\n  * `previousItem` - gets next main menu item\n\n  * `lastItem` - gets last main menu item\n\n  * `mainItems` {`any[]`} - gets main menu items\n\n  * `keyCode` {`{ TAB: number; ENTER: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key codes by key\n\n  * `windowControllers` - \n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `iconPosition` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `_handleResize` - ",
      "attributes": [
        {
          "name": "selected",
          "description": "`selected` {`boolean`} - See what's selected\n\nProperty: selected\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - This is an inline context menu\n\nProperty: inline\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "aria-controls",
          "description": "`aria-controls` {`string`} - id of element controlled by toolbar\n\nProperty: ariaControls"
        },
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - label for the toolbar\n\nProperty: ariaLabel"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-separated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`any[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: "
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-tray-button",
      "description": "`hax-tray-button`\n`A button in the tray`\n\nEvents:\n\n  * `hax-tray-button-click` {`CustomEvent<{ eventName: any; index: any; value: any; }>`} - \n\n  * `super-daemon-voice-command` {`CustomEvent<{ command: any; context: this; callback: string; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `voice-command` {`string`} - Voice command to append for things that support data-voicecommand.\n\n  * `wide` {`boolean`} - \n\n  * `index` {`number`} - Index position in the original list of imports\n\n  * `event-data` {`string`} - \n\n  * `event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `voiceCommand` {`string`} - Voice command to append for things that support data-voicecommand.\n\n  * `wide` {`boolean`} - \n\n  * `index` {`number`} - Index position in the original list of imports\n\n  * `eventData` {`string`} - \n\n  * `eventName` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\n  * `toggledTooltip` {`string`} - Hover tip text\n\n  * `tooltip` {`string`} - Hover tip text\n\n  * `danger` {`boolean`} - red warning\n\n  * `feature` {`boolean`} - Inverted display mode\n\n  * `menu` {`boolean`} - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`number`} - determines if button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | UncompiledTemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`UncompiledTemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`UncompiledTemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "voice-command",
          "description": "`voice-command` {`string`} - Voice command to append for things that support data-voicecommand.\n\nProperty: voiceCommand"
        },
        {
          "name": "wide",
          "description": "`wide` {`boolean`} - \n\nProperty: wide",
          "valueSet": "v"
        },
        {
          "name": "index",
          "description": "`index` {`number`} - Index position in the original list of imports\n\nProperty: index"
        },
        {
          "name": "event-data",
          "description": "`event-data` {`string`} - \n\nProperty: eventData\n\nDefault: null"
        },
        {
          "name": "event-name",
          "description": "`event-name` {`string`} - Name of the event to bubble up as being tapped.\nThis can be used to tell other elements what was\nclicked so it can take action appropriately.\n\nProperty: eventName"
        },
        {
          "name": "toggledTooltip",
          "description": "`toggledTooltip` {`string`} - Hover tip text\n\nProperty: toggledTooltip"
        },
        {
          "name": "tooltip",
          "description": "`tooltip` {`string`} - Hover tip text\n\nProperty: tooltip"
        },
        {
          "name": "danger",
          "description": "`danger` {`boolean`} - red warning\n\nProperty: danger\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "feature",
          "description": "`feature` {`boolean`} - Inverted display mode\n\nProperty: feature\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onhax-tray-button-click",
          "description": "`hax-tray-button-click` {`CustomEvent<{ eventName: any; index: any; value: any; }>`} - "
        },
        {
          "name": "onsuper-daemon-voice-command",
          "description": "`super-daemon-voice-command` {`CustomEvent<{ command: any; context: this; callback: string; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "hax-tray-upload",
      "description": "Events:\n\n  * `click` {`CustomEvent<any>`} - \n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `upload-before` {`CustomEvent<any>`} - \n\n  * `upload-response` {`CustomEvent<any>`} - \n\n  * `responsive-element` {`CustomEvent<{ element: this; attribute: string; relativeToParent: boolean; sm: number; md: number; lg: number; xl: number; }>`} - needs the size of parent container to add responsive styling\n\nAttributes:\n\n  * `show-sources` {`boolean`} - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `responsive-width` {`number`} - \n\n  * `hide-input` {`boolean`} - \n\n  * `items-list` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `no-voice-record` {`boolean`} - No Voice Recording\n\n  * `responsive-size` {`string`} - \n\n  * `t` - \n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\n  * `is-simple-field-type` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name\n\nProperties:\n\n  * `showSources` {`boolean`} - \n\n  * `__winEvents` - \n\n  * `sources` {`UncompiledTemplateResult<1>`} - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `responsiveWidth` {`number`} - \n\n  * `field` - \n\n  * `voice` - \n\n  * `hideInput` {`boolean`} - \n\n  * `itemsList` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `noCamera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `noVoiceRecord` {`boolean`} - No Voice Recording\n\n  * `responsiveSize` {`string`} - \n\n  * `t` - \n\n  * `legend` {`UncompiledTemplateResult<1>`} - \n\n  * `desc` {`UncompiledTemplateResult<1>`} - \n\n  * `fields` {`UncompiledTemplateResult<1>`} - LitElement life cycle - render callback\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\n  * `isSimpleFieldType` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name",
      "attributes": [
        {
          "name": "show-sources",
          "description": "`show-sources` {`boolean`} - \n\nProperty: showSources\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "accept",
          "description": "`accept` {`string`} - Hint for expected file type in file upload controls\n\nProperty: accept"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "option",
          "description": "`option` {`string`} - \n\nProperty: option"
        },
        {
          "name": "responsive-width",
          "description": "`responsive-width` {`number`} - \n\nProperty: responsiveWidth"
        },
        {
          "name": "hide-input",
          "description": "`hide-input` {`boolean`} - \n\nProperty: hideInput\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "items-list",
          "description": "`items-list` - \n\nProperty: itemsList\n\nDefault: "
        },
        {
          "name": "autocomplete",
          "description": "`autocomplete` {`string`} - Hint for form autofill feature\n\nProperty: autocomplete\n\nDefault: on"
        },
        {
          "name": "no-camera",
          "description": "`no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\nProperty: noCamera\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "no-voice-record",
          "description": "`no-voice-record` {`boolean`} - No Voice Recording\n\nProperty: noVoiceRecord\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - \n\nProperty: responsiveSize\n\nDefault: sm"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - Whether field and label should be inline\n\nProperty: inline",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "is-simple-field-type",
          "description": "`is-simple-field-type` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name\n\nProperty: isSimpleFieldType\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "`click` {`CustomEvent<any>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onupload-before",
          "description": "`upload-before` {`CustomEvent<any>`} - "
        },
        {
          "name": "onupload-response",
          "description": "`upload-response` {`CustomEvent<any>`} - "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: this; attribute: string; relativeToParent: boolean; sm: number; md: number; lg: number; xl: number; }>`} - needs the size of parent container to add responsive styling"
        }
      ]
    },
    {
      "name": "hax-tray",
      "description": "`hax-tray`\n`The tray / dashboard area which allows for customization of all major settings`\n\nEvents:\n\n  * `hax-insert-content-array` {`CustomEvent<any>`} - \n\n  * `hax-insert-content` {`CustomEvent<any>`} - \n\n  * `hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - \n\n  * `hax-toggle-active-node-lock` {`CustomEvent<{ lock: any; node: any; }>`} - \n\n  * `simple-modal-hide` {`CustomEvent<{}>`} - \n\n  * `hax-save` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `offset-margin` {`string`} - \n\n  * `loading` {`boolean`} - \n\n  * `element-align` {`string`} - Alignment of the initial edit button\n\n  * `light` {`boolean`} - Light variant for save button\n\n  * `haxUiTheme` {`string`} - \n\n  * `hide-panel-ops` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `activeNode` - Global active node so we know if we need to disable contextual settings\n\n  * `activeGizmo` - \n\n  * `edit-mode` {`boolean`} - State of the panel\n\n  * `trayLabel` {`string`} - heading of toggled section in tray\n\n  * `tourOpened` {`string`} - \n\n  * `__tour` - \n\n  * `trayIcon` {`string`} - \n\n  * `resize-drag` {`boolean`} - \n\n  * `hide-toolbar` {`boolean`} - Ability to hide entire toolbar\n\n  * `activeValue` - Form values for active node\n\n  * `collapsed` {`boolean`} - \n\n  * `activeSchema` {`any[]`} - Form schema for active node\n\n  * `can-undo` {`boolean`} - If we can currently undo based on stack position\n\n  * `can-redo` {`boolean`} - If we can currently redo based on stack position\n\n  * `tray-detail` {`string`} - id of toggled section in tray\n\n  * `activeTagName` {`string`} - Element name / what to display based on active element\n\n  * `traySizeIcon` {`string`} - \n\n  * `t` - \n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `trayStatus` {`string`} - \n\n  * `panelOpsTemplate` {`\"\" | UncompiledTemplateResult<1>`} - \n\n  * `toolbarsTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `menuToolbarTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `menuButtons` {`UncompiledTemplateResult<1>`} - \n\n  * `saveButtons` {`\"\" | UncompiledTemplateResult<1>`} - \n\n  * `doButtons` {`UncompiledTemplateResult<1>`} - \n\n  * `contentButtons` {`UncompiledTemplateResult<1>`} - \n\n  * `moreButtons` {`UncompiledTemplateResult<1>`} - \n\n  * `trayDetailTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `viewSourceTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `contentEditTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `contentAddTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `contentMapTemplate` {`UncompiledTemplateResult<1>`} - \n\n  * `offsetMargin` {`string`} - \n\n  * `loading` {`boolean`} - \n\n  * `elementAlign` {`string`} - Alignment of the initial edit button\n\n  * `light` {`boolean`} - Light variant for save button\n\n  * `haxUiTheme` {`string`} - \n\n  * `hidePanelOps` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `activeNode` - Global active node so we know if we need to disable contextual settings\n\n  * `activeGizmo` - \n\n  * `editMode` {`boolean`} - State of the panel\n\n  * `trayLabel` {`string`} - heading of toggled section in tray\n\n  * `tourOpened` {`string`} - \n\n  * `__tour` - \n\n  * `flattenObject` - \n\n  * `tourController` - \n\n  * `dragController` - \n\n  * `__winEvents` - \n\n  * `trayIcon` {`string`} - \n\n  * `resizeDrag` {`boolean`} - \n\n  * `hideToolbar` {`boolean`} - Ability to hide entire toolbar\n\n  * `__moveX` {`number`} - \n\n  * `_initial` {`boolean`} - \n\n  * `activeValue` - Form values for active node\n\n  * `collapsed` {`boolean`} - \n\n  * `activeSchema` {`any[]`} - Form schema for active node\n\n  * `canUndo` {`boolean`} - If we can currently undo based on stack position\n\n  * `canRedo` {`boolean`} - If we can currently redo based on stack position\n\n  * `trayDetail` {`string`} - id of toggled section in tray\n\n  * `activeTagName` {`string`} - Element name / what to display based on active element\n\n  * `traySizeIcon` {`string`} - \n\n  * `__setup` {`boolean`} - \n\n  * `t` - \n\n  * `tourName` {`string`} - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "offset-margin",
          "description": "`offset-margin` {`string`} - \n\nProperty: offsetMargin"
        },
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - \n\nProperty: loading",
          "valueSet": "v"
        },
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - Alignment of the initial edit button\n\nProperty: elementAlign"
        },
        {
          "name": "light",
          "description": "`light` {`boolean`} - Light variant for save button\n\nProperty: light",
          "valueSet": "v"
        },
        {
          "name": "haxUiTheme",
          "description": "`haxUiTheme` {`string`} - \n\nProperty: haxUiTheme"
        },
        {
          "name": "hide-panel-ops",
          "description": "`hide-panel-ops` {`boolean`} - Showing button area at all a well as internal\nstate managing buttons like cancel and save\n\nProperty: hidePanelOps",
          "valueSet": "v"
        },
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "activeNode",
          "description": "`activeNode` - Global active node so we know if we need to disable contextual settings\n\nProperty: activeNode"
        },
        {
          "name": "activeGizmo",
          "description": "`activeGizmo` - \n\nProperty: activeGizmo"
        },
        {
          "name": "edit-mode",
          "description": "`edit-mode` {`boolean`} - State of the panel\n\nProperty: editMode",
          "valueSet": "v"
        },
        {
          "name": "trayLabel",
          "description": "`trayLabel` {`string`} - heading of toggled section in tray\n\nProperty: trayLabel"
        },
        {
          "name": "tourOpened",
          "description": "`tourOpened` {`string`} - \n\nProperty: tourOpened"
        },
        {
          "name": "__tour",
          "description": "`__tour` - \n\nProperty: __tour"
        },
        {
          "name": "trayIcon",
          "description": "`trayIcon` {`string`} - \n\nProperty: trayIcon\n\nDefault: settings"
        },
        {
          "name": "resize-drag",
          "description": "`resize-drag` {`boolean`} - \n\nProperty: resizeDrag\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hide-toolbar",
          "description": "`hide-toolbar` {`boolean`} - Ability to hide entire toolbar\n\nProperty: hideToolbar\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "activeValue",
          "description": "`activeValue` - Form values for active node\n\nProperty: activeValue\n\nDefault: [object Object]"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - \n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "activeSchema",
          "description": "`activeSchema` {`any[]`} - Form schema for active node\n\nProperty: activeSchema\n\nDefault: [object Object]"
        },
        {
          "name": "can-undo",
          "description": "`can-undo` {`boolean`} - If we can currently undo based on stack position\n\nProperty: canUndo\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "can-redo",
          "description": "`can-redo` {`boolean`} - If we can currently redo based on stack position\n\nProperty: canRedo\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tray-detail",
          "description": "`tray-detail` {`string`} - id of toggled section in tray\n\nProperty: trayDetail\n\nDefault: content-edit"
        },
        {
          "name": "activeTagName",
          "description": "`activeTagName` {`string`} - Element name / what to display based on active element\n\nProperty: activeTagName\n\nDefault: "
        },
        {
          "name": "traySizeIcon",
          "description": "`traySizeIcon` {`string`} - \n\nProperty: traySizeIcon\n\nDefault: hax:arrow-expand-right"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-insert-content-array",
          "description": "`hax-insert-content-array` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-insert-content",
          "description": "`hax-insert-content` {`CustomEvent<any>`} - "
        },
        {
          "name": "onhax-register-core-piece",
          "description": "`hax-register-core-piece` {`CustomEvent<{ piece: string; object: this; }>`} - "
        },
        {
          "name": "onhax-toggle-active-node-lock",
          "description": "`hax-toggle-active-node-lock` {`CustomEvent<{ lock: any; node: any; }>`} - "
        },
        {
          "name": "onsimple-modal-hide",
          "description": "`simple-modal-hide` {`CustomEvent<{}>`} - "
        },
        {
          "name": "onhax-save",
          "description": "`hax-save` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "hax-ui-styles",
      "description": "an empty wrapper to ensure modal content has the same base styles\n\n",
      "attributes": []
    },
    {
      "name": "hax-upload-field",
      "description": "Events:\n\n  * `click` {`CustomEvent<any>`} - \n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `upload-before` {`CustomEvent<any>`} - \n\n  * `upload-response` {`CustomEvent<any>`} - \n\n  * `responsive-element` {`CustomEvent<{ element: this; attribute: string; relativeToParent: boolean; sm: number; md: number; lg: number; xl: number; }>`} - needs the size of parent container to add responsive styling\n\nAttributes:\n\n  * `show-sources` {`boolean`} - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `responsive-width` {`number`} - \n\n  * `hide-input` {`boolean`} - \n\n  * `items-list` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `no-voice-record` {`boolean`} - No Voice Recording\n\n  * `responsive-size` {`string`} - \n\n  * `t` - \n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\n  * `is-simple-field-type` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name\n\nProperties:\n\n  * `showSources` {`boolean`} - \n\n  * `__winEvents` - \n\n  * `sources` {`UncompiledTemplateResult<1>`} - \n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `responsiveWidth` {`number`} - \n\n  * `field` - \n\n  * `voice` - \n\n  * `hideInput` {`boolean`} - \n\n  * `itemsList` - \n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `noCamera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `noVoiceRecord` {`boolean`} - No Voice Recording\n\n  * `responsiveSize` {`string`} - \n\n  * `t` - \n\n  * `legend` {`UncompiledTemplateResult<1>`} - \n\n  * `desc` {`UncompiledTemplateResult<1>`} - \n\n  * `fields` {`UncompiledTemplateResult<1>`} - LitElement life cycle - render callback\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\n  * `isSimpleFieldType` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name",
      "attributes": [
        {
          "name": "show-sources",
          "description": "`show-sources` {`boolean`} - \n\nProperty: showSources\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "accept",
          "description": "`accept` {`string`} - Hint for expected file type in file upload controls\n\nProperty: accept"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "option",
          "description": "`option` {`string`} - \n\nProperty: option"
        },
        {
          "name": "responsive-width",
          "description": "`responsive-width` {`number`} - \n\nProperty: responsiveWidth"
        },
        {
          "name": "hide-input",
          "description": "`hide-input` {`boolean`} - \n\nProperty: hideInput\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "items-list",
          "description": "`items-list` - \n\nProperty: itemsList\n\nDefault: "
        },
        {
          "name": "autocomplete",
          "description": "`autocomplete` {`string`} - Hint for form autofill feature\n\nProperty: autocomplete\n\nDefault: on"
        },
        {
          "name": "no-camera",
          "description": "`no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\nProperty: noCamera\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "no-voice-record",
          "description": "`no-voice-record` {`boolean`} - No Voice Recording\n\nProperty: noVoiceRecord\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - \n\nProperty: responsiveSize\n\nDefault: sm"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - Whether field and label should be inline\n\nProperty: inline",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "is-simple-field-type",
          "description": "`is-simple-field-type` {`boolean`} - a simple boolean so that we can easily select ALL\nthings derived from simple fields regardless of\ntheir eventual tag name\n\nProperty: isSimpleFieldType\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "`click` {`CustomEvent<any>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onupload-before",
          "description": "`upload-before` {`CustomEvent<any>`} - "
        },
        {
          "name": "onupload-response",
          "description": "`upload-response` {`CustomEvent<any>`} - "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ element: this; attribute: string; relativeToParent: boolean; sm: number; md: number; lg: number; xl: number; }>`} - needs the size of parent container to add responsive styling"
        }
      ]
    },
    {
      "name": "hax-eview-source",
      "description": "`hax-eview-source`\n\nAttributes:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `hidden` {`boolean`} - \n\n  * `theme` {`string`} - \n\n  * `t` - \n\nProperties:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `hidden` {`boolean`} - \n\n  * `theme` {`string`} - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "theme",
          "description": "`theme` {`string`} - \n\nProperty: theme"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        }
      ]
    },
    {
      "name": "hax-view-source",
      "description": "`hax-eview-source`\n\nAttributes:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `hidden` {`boolean`} - \n\n  * `theme` {`string`} - \n\n  * `t` - \n\nProperties:\n\n  * `globalPreferences` - Global preferences for HAX overall\n\n  * `hidden` {`boolean`} - \n\n  * `theme` {`string`} - \n\n  * `t` - ",
      "attributes": [
        {
          "name": "globalPreferences",
          "description": "`globalPreferences` - Global preferences for HAX overall\n\nProperty: globalPreferences"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "theme",
          "description": "`theme` {`string`} - \n\nProperty: theme"
        },
        {
          "name": "t",
          "description": "`t` - \n\nProperty: t\n\nDefault: [object Object]"
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}